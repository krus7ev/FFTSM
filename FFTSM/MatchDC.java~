//package fftsm;

import java.io.*;
import java.util.*;
import java.lang.String;
import java.lang.Math;

public class MatchDC
{
    public void main (String[] args)
    {
        if (args.length != 1)
        {
            System.out.println("Input Error: One input file required!");
            System.exit(1);
        }
            
        File inputFile = new File(args[0]);        
        String[] lineIn = readFile(inputFile);
        
        int matLen = lineIn[0].length();
        int patLen = lineIn[1].length();  
      
        double[] text = formatInput(lineIn[0]);
        int len = text.length;
          
        double[] pattern = formatPattern(lineIn[1], text.length);   
        
        double[] pXt = FFT.multiply(text, pattern);    
        
        double patSqrSum = 0;    
        for (int i=0; i<patLen; i++)
            patSqrSum += Math.pow(pattern[i], 2);

        double matSqrSum = 0;
        for (int j=1; j<=patLen; j++)
            matSqrSum += Math.pow(text[len-j],2);
        
        double[] matches = new double[len];               
        for(int i=len-1; i>=len-matLen+patLen-1; i--)
        {
            if (i<len-1)
                matSqrSum = matSqrSum - Math.pow(text[i+1], 2) + Math.pow(text[i-patLen+1], 2);
            
            matches[i] = patSqrSum + matSqrSum - 2*pXt[i];               
            if (matches[i] == 0)
                System.out.print(len-i + " ");
        }
        System.out.println();
    }
    
        public static double[] formatInput(String lineIn) 
    {
        int len = lineIn.length();
        double[] textCf = new double[len];
        double in;
        for(int i=0; i<len; i++)
        {
            in = (double)(lineIn.charAt(len-(i+1)));
            textCf[i] = (in==63) ? 0 : in;
        }
         
        double lenLog = Math.log(len)/Math.log(2);
        int newLen = (int)(lenLog);        
        if (newLen != lenLog)
            newLen = (int)(Math.pow(2, newLen+1));
        else
            newLen = len;
        
        double[] text = new double[newLen];
        Arrays.fill(text, 0);
        System.arraycopy(textCf, 0, text, newLen-len, len);   
        
        return text;        
    }
    
    public static double[] formatPattern(String lineIn, int newLen)
    {
        int len = lineIn.length();
        double[] pattCf = new double[len];
        double in;
        for(int i=0; i<len; i++)
        {
            in = (double)(lineIn.charAt(i));
            pattCf[i] = (in==63) ? 0 : in;                
        }
        
        double[] pattern = new double[newLen];
        Arrays.fill(pattern, 0);
        System.arraycopy(pattCf, 0, pattern, 0, len);
        
        return pattern;
    }
}
